8-bit Segmentation Adder Verilog Code:


module sa(
input [n-1:0] a, // First operand
input [n-1:0] b, // Second operand
output [n-1:0] sum // Result
);
parameter n = 8; // Number of bits
wire [n-1:0] carry;
// Generate the carry signals
genvar i;
generate
for (i = 0; i < n; i = i + 1) begin
if (i == 0) begin
// First bit, no carry input
assign carry[i] = a[i] & b[i];
end else begin
// Subsequent bits, use previous carry output
assign carry[i] = (a[i] & b[i]) | (a[i] & carry[i-1]) | (b[i] & carry[i-1]);
end
end
endgenerate
// Generate the sum signals
genvar j;
generate
for (j = 0; j < n; j = j + 1) begin
assign sum[j] = a[j] ^ b[j] ^ carry[j];
end
endgenerate
endmodule


b. 4-bit Segmentation Adder Verilog Code:


module sa(
input [n-1:0] a, // First operand
input [n-1:0] b, // Second operand
output [n-1:0] sum // Result
);
parameter n = 8; // Number of bits
wire [n-1:0] carry;
// Generate the carry signals
genvar i;
generate
for (i = 0; i < n; i = i + 1) begin
if (i == 0) begin
// First bit, no carry input
assign carry[i] = a[i] & b[i];
end else begin
// Subsequent bits, use previous carry output
assign carry[i] = (a[i] & b[i]) | (a[i] & carry[i-1]) | (b[i] & carry[i-1]);
end
end
endgenerate
// Generate the sum signals
genvar j;
generate
for (j = 0; j < n; j = j + 1) begin
assign sum[j] = a[j] ^ b[j] ^ carry[j];
end
endgenerate
endmodule


c. 8-bit Segmentation Adder Testbench Code:


module sa;
reg [7:0] a;
reg [7:0] b;
wire [7:0] sum;
sa uut(
.a(a),
.b(b),
.sum(sum)
);
initial begin
a = 8'h12;
b = 8'h34;
#5;
a = 8'h10;
b = 8'h30;
#5;
a = 8'h08;
b = 8'h50;
#5;
a = 8'h49;
b = 8'h22;
#5;
a = 8'h74;
b = 8'h63;
#5;
a = 8'h02;
b = 8'h04;
#5;
a = 8'h88;
b = 8'h11;
#5;
end
//Dump waves (only required here)
initial
begin
$dumpfile("dump.vcd");
$dumpvars(1);
end
endmodule
